# -*- coding: utf-8 -*-
"""DefineAndSolveMLProblem.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1fZqeaOxEBCJ3HunDnsB_46NF2TwT4HG5

# Analyzing Mental Health Needs by Country using the WHR
"""

import pandas as pd
import numpy as np
import os
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.cluster import KMeans
from sklearn.preprocessing import StandardScaler
from sklearn.model_selection import train_test_split

"""## Building the Data Matrix

"""

df = pd.read_csv("WHR2018Chapter2OnlineData.csv")
df.head(5)

"""## Data Exploration"""

#Extracted only applicable features from original data
data = df[["Log GDP per capita", "Social support", "Generosity", "Freedom to make life choices", "Perceptions of corruption", "Negative affect"]]
print(data.shape)
data.dtypes

sns.pairplot(data=data)

for column in data.columns:
    print(data[column].describe())

np.sum(data.isnull())

data.head()

"""## Data Preparation and Model Selection"""

#Data Preparation
data = data.dropna()
data = data.rename(columns={"Log GDP per capita": "Prosperity", "Freedom to make life choices": "Freedom", "Perceptions of corruption": "Government Trust"})
scaler = StandardScaler()
transformed_data = scaler.fit_transform(data)
data = pd.DataFrame(transformed_data, columns=data.columns, index=data.index)

#Selection
cluster_labels = {}

X_val = data

for k in [6, 7, 8, 9, 10, 11, 12]:
    test = KMeans(n_clusters=k, random_state=42)
    test.fit(data[["Prosperity", "Freedom", "Government Trust", "Generosity", "Negative affect", "Social support"]])
    X_val[f'cluster_{k}'] = test.labels_
    cluster_labels[k] = test.labels_

for k in [6, 7, 8, 9, 10, 11, 12]:
    for feature in data[["Prosperity", "Freedom", "Government Trust", "Generosity", "Negative affect", "Social support"]].columns:
        sns.scatterplot(x=X_val["Negative affect"], y=X_val[feature], hue=X_val[f'cluster_{k}'], palette='tab10')
        plt.title(f"k={k}: Negative affect vs {feature}")
        plt.xlabel("Negative affect")
        plt.ylabel(feature)
        plt.legend(title="Cluster")
        plt.show()

"""## Training and Visualization"""

#Training
model = KMeans(n_clusters=12, random_state = 42)
model.fit(data)
data['clusters'] = model.labels_.tolist()

#Visualizing final results
for feature in data[["Prosperity", "Freedom", "Government Trust", "Generosity", "Negative affect", "Social support"]].columns:
        sns.scatterplot(x=data["Negative affect"], y=data[feature], hue=data['clusters'], palette='tab10')
        plt.title(f"Negative affect vs {feature}")
        plt.xlabel("Negative affect")
        plt.ylabel(feature)
        plt.legend(title="Cluster")
        plt.show()

clusters_countries = clusters_countries.dropna()
clusters_countries = pd.concat([df["country"], data["clusters"].astype(int)], axis=1)
visual = pd.DataFrame(clusters_countries.sort_values(by="clusters"), index=clusters_countries.index)
pd.set_option('display.max_rows', None)
visual